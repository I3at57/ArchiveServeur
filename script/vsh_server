#! /bin/bash

# Ce script implemente un serveur.  

PORT=${1:-"8081"}
LOCATION=${2:-"$HOME/.archives"}

# Créer le dossier contenant les archives s'il n'existe pas.
[ -d $LOCATION ] || mkdir $LOCATION

# Declaration du tube
FIFO="/tmp/$USER-fifo-$$"

# Il faut detruire le tube quand le serveur termine pour eviter de
# polluer /tmp.  On utilise pour cela une instruction trap pour etre sur de
# nettoyer meme si le serveur est interrompu par un signal.

function nettoyage() { rm -f "$FIFO"; }
trap nettoyage EXIT

# on cree le tube nomme
[ -e "$FIFO" ] || mkfifo "$FIFO"

function accept-loop() {
    while true; do
		echo new connection
		interaction < "$FIFO" | ncat -l -p "$PORT" > "$FIFO"
    done
}

# La fonction interaction lit les commandes du client sur entree standard 
# et envoie les reponses sur sa sortie standard. 
#
# 	CMD arg1 arg2 ... argn                   
#                     
# alors elle invoque la fonction :
#                                                                            
#         commande-CMD arg1 arg2 ... argn                                      
#                                                                              
# si elle existe; sinon elle envoie une reponse d'erreur.                    

# Cette fonction va récupérer les arguments et executer la commande choisie
function interaction() {
	read cmd args || exit -1
	fun="commande-$cmd"
	if [ "$(type -t $fun)" = "function" ]; then
		cat | $fun $args
	else
		cat | commande-non-comprise $fun $args
	fi
}

###########################################################################
# Les fonctions serieuses
###########################################################################

function commande-non-comprise () {
	echo "Le serveur ne peut pas interpreter cette commande"
}

documentation_doc="Donne de la documentation sur les commandes possibles."
function commande-documentation() {
	echo documentation/d: $documentation_doc
	echo echo: $echo_doc
	echo quit: $qui_doc
	echo quit-s: $quis_doc
	echo ecrire-fichier: $ecrire_doc
}
function commande-d() {
	commande-documentation
}

echo_doc="Retourne les arguments donnés."
function commande-echo() {
	echo "$*"
}


ecrire_doc="Ajoute les arguments a l'archive présente dans $HOME/.archives"
function commande-ecrire-fichier() {
	if [ -z $1 ] ; then echo "Error: No file name found" ; exit 1 ; fi
	
	cat > $LOCATION/$1
}

function commande-lire-fichier() {
	if [ -z $1 ] ; then echo "Error: No file name found" ; exit 1 ; fi

	# Compter le nombre de caracteres à envoyer
	cat $1 | wc -c
	cat LOCATION/$1
}
# On accepte et traite les connexions
accept-loop
