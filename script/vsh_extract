#!/bin/bash -e

ROOT=$(dirname $(realpath $0))
source $ROOT/utils

#######################
#FONCTION : archive_is_existing
#Vérifie si l'archive souhaitée existe vraiment sur le serveur
function archive_is_existing() {
	find="$(bash $ROOT/vsh_list $1 $2 | egrep ".* $3$")"
	if [[ $find =~ " $3" ]]
	then
		TROUVE='OUI'
	else
		TROUVE='NON'
	fi
}

#######################
#FONCTION : get_values
#Initialise toutes les variables et crée les fichiers temporaires
function get_values() {
	ELDER_DIR=$(pwd) #Place ou le script s'execute
	local ARCHIVE="$1" #Nom de l'archive qui doit être présente dans ELDER_DIR

	DEBUT_HEADER=$(head -1 $ARCHIVE | cut -d':' -f1)
	FIN_HEADER=$(head -1 $ARCHIVE | cut -d':' -f2)

	#Crée deux fichiers temporaires pour le body et le header
	tail +$DEBUT_BODY $ARCHIVE > /tmp/.tempbody
	head -$FIN_HEADER $ARCHIVE | tail +$DEBUT_HEADER | sed 's/\\/\//g' > /tmp/.temphead
	
	path=$(head -1 /tmp/.temphead | cut -d' ' -f2)
	NOM_BASE="$(basename $path)"
	NOM_DROP="$(dirname $path)"
	
	mkdir -p "./$NOM_BASE"
}

#######################
#FONCTION : build
#Recrée l'archive décrite par un fichier présent dans le répertoire courant
function build() {
	while read lines
	do
		if [[ $lines =~ ^directory ]]
		then
			drop=$(echo $NOM_DROP | sed 's/\//\\\//g')
			currentdir=".$(echo $lines | cut -d' ' -f2 | sed "s/$drop//g")"
		else
			if ((1!=2)) #Zone de contrôle
			then
				if [[ $(echo $lines | cut -d' ' -f2) =~ ^d ]]
				then
					mkdir -p $currentdir/$(echo $lines | cut -d' ' -f1)
				elif [[ $lines =~ ^@$ ]]
				then
					:
				else
					nom_file=$(echo $lines | cut -d' ' -f1)
					path="$currentdir/$nom_file"
					debut_file=$(echo $lines | cut -d' ' -f4)
					nbr_file=$(echo $lines | cut -d' ' -f5)
					marqA=$((debut_file - DEBUT_BODY + nbr_file - 1))
					head -$marqA /tmp/.tempbody | tail -$nbr_file > $path

					droits=$(echo $lines | cut -d' ' -f2)
					user=${droits:1:3}
					group=${droits:4:3}
					other=${droits:7:3}

					chmod u=$user $path
					chmod g=$group $path
					chmod o=$other $path	
				fi
			fi
		fi
	done < /tmp/.temphead
}

######################################################################################

# Initialise les variables
SERVER=$1	#Nom du serveur
PORT=$2	#Numéro de port
ARCHIVE=$3	#Nom de l'archive
ROOT=$(dirname $(realpath $0)) #Chemin du répertoire courant ou est executé le script
TROUVE='NON'	#Variable qui explicite la présence de l'archive

archive_is_existing $SERVER $PORT $ARCHIVE
if [ $TROUVE == 'OUI' ]
then
	echo "L'archive souhaitée existe."
	lire_fichier $SERVER $PORT $ARCHIVE /tmp/$ARCHIVE
	get_values /tmp/$ARCHIVE	#Récupère les varibales de l'archive
	build	#recrée l'arboréscence
	rm /tmp/.temphead /tmp/.tempbody /tmp/$ARCHIVE
else
	echo "L'archive souhaitée n'existe pas."
fi
